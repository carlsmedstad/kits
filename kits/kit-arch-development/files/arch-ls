#!/bin/bash

set -euo pipefail

argv0=arch-ls

curl_args_default="--silent --show-error --fail-with-body"
curl_args_str=${CURL_ARGS:-$curl_args_default}
# shellcheck disable=SC2206
curl_args=($curl_args_str)

usage() {
  cat << EOF >&2
Usage: $argv0 [options...] [repository...]

Lists packages in specified Arch Linux repositories maintained by
a particlar user.

Allowed repository values:
  core core-testing extra extra-testing multilib multilib-testing

Options:
  -m, --maintainer <user>   Maintainer's packages to list
                            default: \$USER
  -f, --flagged yes|no|any  Show only flagged packages
                            default: any
  -j, --jq-query <query>    Query to apply to results
                            default: '.pkgname' ('.Name' for AUR)
  -h, --help                Display this help message and exit

Environment variables:
  CURL_ARGS   Arguments to curl
              default: $curl_args_default

Examples:
  $argv0 core extra
  $argv0 --jq-query .pkgbase extra-testing
  $argv0 --maintainer carsme extra
EOF
}

maintainer=$USER
flagged=any
jq_query=.pkgname

opt_short='m:f:j:h'
opt_long='maintainer:,flagged:,jq-query:,help'
if opts=$(getopt -o "$opt_short" -l "$opt_long" -n "$argv0" -- "$@"); then
  eval set -- "$opts"
fi

while true; do
  case $1 in
  -m | --maintainer)
    shift
    maintainer=${1:-}
    ;;
  -f | --flagged)
    shift
    flagged=${1:-}
    ;;
  -j | --jq-query)
    shift
    jq_query=${1:-}
    ;;
  -h | --help)
    usage
    exit
    ;;
  --)
    shift
    break
    ;;
  *)
    exit 1
    ;;
  esac
  shift
done

if [ "$#" -eq 0 ]; then
  printf >&2 '%s: no repository supplied\n' "$argv0"
  exit 1
fi

validate_value() {
  local value=$1
  shift
  local allowed_values=("$@")

  if [[ ! ${allowed_values[*]} =~ $value ]]; then
    printf >&2 '%s: %s: invalid value\n' "$argv0" "$value"
    exit 1
  fi
}

allowed_flagged=(yes no any)
validate_value "$flagged" "${allowed_flagged[@]}"

fix_repo_casing() {
  case "$1" in
  core)
    echo Core
    ;;
  core-testing)
    echo Core-Testing
    ;;
  core-staging)
    echo Core-Staging
    ;;
  extra)
    echo Extra
    ;;
  extra-testing)
    echo Extra-Testing
    ;;
  extra-staging)
    echo Extra-Staging
    ;;
  multilib)
    echo Multilib
    ;;
  multilib-testing)
    echo Multilib-Testing
    ;;
  multilib-staging)
    echo Multilib-Staging
    ;;
  *)
    printf >&2 '%s: %s: invalid repository supplied\n' "$argv0" "$1"
    return 1
    ;;
  esac
}

call_rpc_process_response() {
  local url=${1:?}
  response=$(curl "${curl_args[@]}" "$url")
  echo "$response" | jq -rc ".results[] | $jq_query"
  num_pages=$(echo "$response" | jq -r .num_pages)
  if [ "$num_pages" != null ]; then
    for page in $(seq 2 "$num_pages"); do
      curl "${curl_args[@]}" "$url&page=$page" | jq -rc ".results[] | $jq_query"
    done
  fi
}

flagged_param=""
[ "$flagged" = yes ] && flagged_param="&flagged=Flagged"
[ "$flagged" = no ] && flagged_param="&flagged=Not+Flagged"

{
  for repo in "$@"; do
    repo_cased=$(fix_repo_casing "$repo")
    arch_rpc_search_url="https://archlinux.org/packages/search/json/"
    call_rpc_process_response "$arch_rpc_search_url?maintainer=$maintainer&repo=$repo_cased$flagged_param"
  done
} | sort | uniq
