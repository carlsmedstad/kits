#!/bin/bash

set -euo pipefail

argv0=arch-ls

curl_args_default="--silent --show-error --fail-with-body"
curl_args_str=${CURL_ARGS:-$curl_args_default}
# shellcheck disable=SC2206
curl_args=($curl_args_str)

usage() {
  cat << EOF >&2
Usage: $argv0 [options...] [repository]

Lists packages for a maintainer from Arch Linux repositories.

Allowed repository values:
  core core-testing extra extra-testing
  multilib multilib-testing aur official

Options:
  -m, --maintainer <user> Maintainer's packages to list
                          default: \$USER
  -j, --jq-query <query>  Query to apply to results
                          default: '.pkgname' ('.Name' for AUR)
  -h, --help              Display this help message and exit

Environment variables:
  CURL_ARGS   Arguments to curl
              default: $curl_args_default

Examples:
  $argv0 extra
  $argv0 --jq-query '.pkgbase' extra-testing
  $argv0 --maintainer carsme aur
EOF
}

maintainer=$USER

opt_short='m:j:h'
opt_long='maintainer:,jq-query:,help'
if opts=$(getopt -o "$opt_short" -l "$opt_long" -n "$argv0" -- "$@"); then
  eval set -- "$opts"
fi

while true; do
  case $1 in
  -m | --maintainer)
    shift
    maintainer=${1:-}
    ;;
  -j | --jq-query)
    shift
    jq_query=${1:-}
    ;;
  -h | --help)
    usage
    exit
    ;;
  --)
    shift
    break
    ;;
  *)
    exit 1
    ;;
  esac
  shift
done

[ "$#" -ne 1 ] && {
  printf >&2 '%s: no repository supplied\n' "$argv0"
  exit 1
}
repo=${1:?}

if [ -z "${jq_query:-}" ] && [ "$repo" = "aur" ]; then
  jq_query=.Name
else
  jq_query=.pkgname
fi

repos_official=(
  core
  core-testing
  extra
  extra-testing
  multilib
  multilib-testing
)
repos_others=(
  aur
  official
)
repo_allowed_values=("${repos_official[*]}" "${repos_others[*]}")

if [[ ! ${repo_allowed_values[*]} =~ $repo ]]; then
  printf >&2 '%s: %s: invalid repository\n' "$argv0" "$repo"
  exit 1
fi

case "$repo" in
core)
  repo_cased=Core
  ;;
core-testing)
  repo_cased=Core-Testing
  ;;
extra)
  repo_cased=Extra
  ;;
extra-testing)
  repo_cased=Extra-Testing
  ;;
multilib)
  repo_cased=Multilib
  ;;
multilib-testing)
  repo_cased=Multilib-Testing
  ;;
*)
  repo_cased=$repo
  ;;
esac

call_rpc_process_response() {
  local url=${1:?}
  response=$(curl "${curl_args[@]}" "$url")
  echo "$response" | jq -rc ".results[]$jq_query"
  num_pages=$(echo "$response" | jq -r .num_pages)
  if [ "$num_pages" != null ]; then
    for page in $(seq 2 "$num_pages"); do
      curl "${curl_args[@]}" "$url&page=$page" | jq -rc ".results[]$jq_query"
    done
  fi
}

{
  if [ "$repo" = aur ]; then
    aur_rpc_search_url="https://aur.archlinux.org/rpc/?v=5&type=search"
    call_rpc_process_response "$aur_rpc_search_url&by=maintainer&arg=$maintainer"
    call_rpc_process_response "$aur_rpc_search_url&by=comaintainers&arg=$maintainer"
  fi
  arch_rpc_search_url="https://archlinux.org/packages/search/json/"
  if [ "$repo" = official ]; then
    call_rpc_process_response "$arch_rpc_search_url?maintainer=$maintainer"
  fi
  if [[ ${repos_official[*]} =~ $repo ]]; then
    call_rpc_process_response "$arch_rpc_search_url?maintainer=$maintainer&repo=$repo_cased"
  fi
} | sort | uniq
